"""
Tag normalization model to track AI-generated tags for admin review and approval.
"""
from sqlalchemy import Column, String, Text, Boolean, ForeignKey, Enum, Float, DateTime
from sqlalchemy.orm import relationship
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import UUID
from enum import Enum as PyEnum

from app.db.models.base_model import BaseModel

class TagReviewStatus(PyEnum):
    """
    Status of a tag in the review process.
    """
    pending = "pending"      # Awaiting review
    approved = "approved"    # Approved for use
    rejected = "rejected"    # Rejected, don't use
    modified = "modified"    # Modified by admin, use modified version

class TagSource(PyEnum):
    """
    Source of the tag to track where it originated.
    """
    ai_generated = "ai_generated"  # Generated by AI from content
    user_created = "user_created"  # Created by a user
    admin_created = "admin_created"  # Created by an admin
    imported = "imported"    # Imported from an external source

class TagNormalization(BaseModel):
    """
    Model for tracking and normalizing tags before they become part of the main tag system.
    This allows for admin review of AI-generated tags before they're visible to users.
    """
    __tablename__ = "tag_normalizations"

    # Original tag name as found in content or entered by user
    original_name = Column(String, nullable=False, index=True)
    
    # Normalized version of the tag (proper capitalization, etc.)
    normalized_name = Column(String, nullable=False, index=True)
    
    # Description for the normalized tag
    description = Column(Text, nullable=True)
    
    # Parent tag IDs (array of UUIDs)
    parent_tag_ids = Column(postgresql.ARRAY(UUID(as_uuid=True)), nullable=True)
    
    # Review status of this tag
    review_status = Column(Enum(TagReviewStatus), nullable=False, server_default='pending', index=True)
    
    # Admin notes for review process
    admin_notes = Column(Text, nullable=True)
    
    # Source of the tag
    source = Column(Enum(TagSource), nullable=False, server_default='ai_generated', index=True)
    
    # Confidence score (for AI-generated normalizations)
    confidence_score = Column(Float, nullable=True)
    
    # User who reviewed this tag
    reviewed_by = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=True)
    
    # When the tag was reviewed
    reviewed_at = Column(DateTime(timezone=True), nullable=True)
    
    # If this tag was approved, link to the final tag
    approved_tag_id = Column(UUID(as_uuid=True), ForeignKey("tags.id"), nullable=True, index=True)
    
    # Whether the tag was auto-approved
    auto_approved = Column(Boolean, nullable=False, server_default='false')
    
    # Relationships
    approved_tag = relationship("Tag", foreign_keys=[approved_tag_id], lazy="selectin")
    
    @property
    def safe_normalized_name(self):
        """Safely access normalized_name with a fallback to original_name to prevent NoneType errors"""
        if hasattr(self, 'normalized_name') and self.normalized_name is not None:
            return self.normalized_name
        return self.original_name if hasattr(self, 'original_name') and self.original_name is not None else ''
    
    def __repr__(self):
        return f"<TagNormalization: {self.original_name} â†’ {self.normalized_name} ({self.review_status.value})>"
